// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tekus.Infrastructure.Data;

#nullable disable

namespace Tekus.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tekus.Domain.Entities.Country", b =>
                {
                    b.Property<int>("idcountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idcountry"));

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idcountry");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Tekus.Domain.Entities.Provider", b =>
                {
                    b.Property<int>("idprovider")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idprovider"));

                    b.Property<string>("mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idprovider");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Tekus.Domain.Entities.ProviderHasServices", b =>
                {
                    b.Property<int>("Providers_idprovider")
                        .HasColumnType("int");

                    b.Property<int>("Services_idservice")
                        .HasColumnType("int");

                    b.Property<int>("Country_idcountry")
                        .HasColumnType("int");

                    b.HasKey("Providers_idprovider", "Services_idservice", "Country_idcountry");

                    b.HasIndex("Country_idcountry");

                    b.HasIndex("Services_idservice");

                    b.ToTable("Providers_has_Services");
                });

            modelBuilder.Entity("Tekus.Domain.Entities.Services", b =>
                {
                    b.Property<int>("idservice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idservice"));

                    b.Property<string>("service")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("time_value")
                        .HasColumnType("real");

                    b.HasKey("idservice");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Tekus.Domain.Entities.ProviderHasServices", b =>
                {
                    b.HasOne("Tekus.Domain.Entities.Country", "Country")
                        .WithMany("ProviderHasServices")
                        .HasForeignKey("Country_idcountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tekus.Domain.Entities.Provider", "Provider")
                        .WithMany("ProviderHasServices")
                        .HasForeignKey("Providers_idprovider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tekus.Domain.Entities.Services", "Services")
                        .WithMany("ProviderHasServices")
                        .HasForeignKey("Services_idservice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Provider");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Tekus.Domain.Entities.Country", b =>
                {
                    b.Navigation("ProviderHasServices");
                });

            modelBuilder.Entity("Tekus.Domain.Entities.Provider", b =>
                {
                    b.Navigation("ProviderHasServices");
                });

            modelBuilder.Entity("Tekus.Domain.Entities.Services", b =>
                {
                    b.Navigation("ProviderHasServices");
                });
#pragma warning restore 612, 618
        }
    }
}
